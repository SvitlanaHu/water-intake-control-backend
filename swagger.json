{
  "swagger": "2.0",
  "info": {
    "description": "API for managing users and their water consumption data.",
    "version": "1.0.0",
    "title": "User and Water Management API",
    "contact": {
      "email": "jaycikey@gmail.com"
    }
  },
  "host": "localhost:3000",
  "basePath": "/api",
  "tags": [
    {
      "name": "User",
      "description": "Operations related to users"
    },
    {
      "name": "Water",
      "description": "Operations related to water consumption records"
    }
  ],
  "schemes": [
    "https",
    "http"
  ],
  "paths": {
    "/users/register": {
      "post": {
        "tags": [
          "User"
        ],
        "summary": "Register a new user",
        "description": "Registers a new user with an email, password, and optional timezone. Sends a verification email.",
        "operationId": "registerUser",
        "consumes": [
          "application/json"
        ],
        "produces": [
          "application/json"
        ],
        "security": [],
        "parameters": [
          {
            "in": "body",
            "name": "body",
            "description": "User registration data",
            "required": true,
            "schema": {
              "$ref": "#/definitions/UserRegister"
            }
          }
        ],
        "responses": {
          "201": {
            "description": "User successfully registered",
            "schema": {
              "$ref": "#/definitions/UserResponse"
            }
          },
          "403": {
            "description": "User validation failed"
          },
          "409": {
            "description": "Email already in use"
          }
        }
      }
    },
    "/users/login": {
      "post": {
        "tags": [
          "User"
        ],
        "summary": "Log in a user",
        "description": "Logs in a user and returns a token along with user data.",
        "operationId": "loginUser",
        "consumes": [
          "application/json"
        ],
        "produces": [
          "application/json"
        ],
        "security": [],
        "parameters": [
          {
            "in": "body",
            "name": "body",
            "description": "User login credentials",
            "required": true,
            "schema": {
              "$ref": "#/definitions/UserLogin"
            }
          }
        ],
        "responses": {
          "200": {
            "description": "Login successful",
            "schema": {
              "$ref": "#/definitions/LoginResponse"
            }
          },
          "401": {
            "description": "Invalid credentials or email not verified"
          }
        }
      }
    },
    "/users/logout": {
      "post": {
        "tags": [
          "User"
        ],
        "summary": "Logout a user",
        "description": "Logs out the current user by clearing their active session or token.",
        "operationId": "logoutUser",
        "security": [
          {
            "Bearer": []
          }
        ],
        "responses": {
          "204": {
            "description": "Successfully logged out"
          },
          "401": {
            "description": "Not authorized"
          }
        }
      }
    },
    "/users/current": {
      "get": {
        "tags": [
          "User"
        ],
        "summary": "Get current user",
        "description": "Retrieves the currently logged-in user's data.",
        "operationId": "getCurrentUser",
        "security": [
          {
            "Bearer": []
          }
        ],
        "produces": [
          "application/json"
        ],
        "responses": {
          "200": {
            "description": "User data retrieved successfully",
            "schema": {
              "$ref": "#/definitions/UserResponse"
            }
          },
          "401": {
            "description": "Not authorized"
          }
        }
      }
    },
    "/users/update": {
      "patch": {
        "tags": [
          "User"
        ],
        "summary": "Update user details",
        "description": "Updates specified user details. If the email is updated, it will require re-verification.",
        "operationId": "updateUser",
        "consumes": [
          "application/json"
        ],
        "produces": [
          "application/json"
        ],
        "security": [
          {
            "Bearer": []
          }
        ],
        "parameters": [
          {
            "in": "body",
            "name": "body",
            "required": true,
            "schema": {
              "$ref": "#/definitions/UpdateUser"
            }
          }
        ],
        "responses": {
          "200": {
            "description": "User details updated",
            "schema": {
              "$ref": "#/definitions/UpdateUserResponse"
            }
          },
          "404": {
            "description": "User not found"
          },
          "400": {
            "description": "Disallowed fields or email already in use"
          },
          "401": {
            "description": "Not authorized"
          }
        }
      }
    },
    "/users/subscription": {
      "patch": {
        "tags": [
          "User"
        ],
        "summary": "Update user subscription",
        "description": "Updates the subscription type for the current user. Requires a specific key in the request header.",
        "operationId": "updateSubscription",
        "consumes": [
          "application/json"
        ],
        "produces": [
          "application/json"
        ],
        "security": [
          {
            "Bearer": []
          }
        ],
        "parameters": [
          {
            "in": "header",
            "name": "x-custom-key",
            "type": "string",
            "required": true,
            "description": "Key required to authorize subscription update"
          },
          {
            "in": "body",
            "name": "body",
            "description": "New subscription details",
            "required": true,
            "schema": {
              "$ref": "#/definitions/UpdateSubscription"
            }
          }
        ],
        "responses": {
          "200": {
            "description": "Subscription updated successfully",
            "schema": {
              "$ref": "#/definitions/SubscriptionResponse"
            }
          },
          "403": {
            "description": "Forbidden: Invalid or missing key"
          },
          "404": {
            "description": "User not found"
          }
        }
      }
    },
    "/users/avatars": {
      "patch": {
        "tags": [
          "User"
        ],
        "summary": "Update user's avatar",
        "description": "Uploads and updates the user's avatar image. The image is uploaded to Cloudinary.",
        "operationId": "patchAvatar",
        "consumes": [
          "multipart/form-data"
        ],
        "produces": [
          "application/json"
        ],
        "security": [
          {
            "Bearer": []
          }
        ],
        "parameters": [
          {
            "in": "formData",
            "name": "avatar",
            "type": "file",
            "description": "The new avatar file",
            "required": true
          }
        ],
        "responses": {
          "200": {
            "description": "Avatar updated successfully",
            "schema": {
              "$ref": "#/definitions/AvatarResponse"
            },
            "examples": {
              "application/json": {
                "avatarURL": "http://res.cloudinary.com/your_cloud_name/image/upload/v1624460648/avatars/1624460648123-sample.jpg"
              }
            }
          },
          "400": {
            "description": "No file uploaded"
          },
          "401": {
            "description": "Not authorized"
          }
        }
      }
    },
    "/users/verify/{verificationToken}": {
      "get": {
        "tags": [
          "User"
        ],
        "summary": "Verify user email",
        "description": "Verifies the user's email using a token sent via email. Upon successful verification, the user is redirected to the frontend with a JWT token and refresh token in the URL parameters.",
        "operationId": "verifyEmail",
        "produces": [
          "application/json"
        ],
        "parameters": [
          {
            "name": "verificationToken",
            "in": "path",
            "required": true,
            "type": "string",
            "description": "The verification token from the email"
          }
        ],
        "responses": {
          "302": {
            "description": "Redirection to the frontend with tokens in URL",
            "headers": {
              "Location": {
                "type": "string",
                "description": "URL to redirect the user to, with JWT token and refresh token as query parameters",
                "example": "http://your-frontend-url.com/verify?token=your_jwt_token&refreshToken=your_refresh_token"
              }
            }
          },
          "404": {
            "description": "Token invalid or user not found"
          }
        }
      }
    },
    "/users/verify/resend": {
      "post": {
        "tags": [
          "User"
        ],
        "summary": "Resend verification email",
        "description": "Resends the verification email to the user. Uses the same template as registration.",
        "operationId": "resendVerificationEmail",
        "consumes": [
          "application/json"
        ],
        "produces": [
          "application/json"
        ],
        "parameters": [
          {
            "in": "body",
            "name": "body",
            "required": true,
            "schema": {
              "$ref": "#/definitions/ResendVerification"
            }
          }
        ],
        "responses": {
          "200": {
            "description": "Verification email resent successfully",
            "schema": {
              "$ref": "#/definitions/ResendVerificationResponse"
            }
          },
          "404": {
            "description": "User not found or already verified"
          }
        }
      }
    },
    "/users/total": {
      "get": {
        "tags": [
          "User"
        ],
        "summary": "Get total users and last five avatars",
        "description": "Returns the total number of registered users and the avatars of the last five registered users.",
        "operationId": "getTotalUsers",
        "produces": [
          "application/json"
        ],
        "security": [],
        "responses": {
          "200": {
            "description": "Total users and last five avatars retrieved successfully",
            "schema": {
              "$ref": "#/definitions/TotalUsersResponse"
            }
          },
          "500": {
            "description": "Server error"
          }
        }
      }
    },
    "/users/refresh-tokens": {
      "post": {
        "tags": [
          "User"
        ],
        "summary": "Refresh user tokens",
        "description": "Refreshes the user's access and refresh tokens using the provided refresh token.",
        "operationId": "refreshUserTokens",
        "consumes": [
          "application/json"
        ],
        "produces": [
          "application/json"
        ],
        "security": [],
        "parameters": [
          {
            "in": "body",
            "name": "body",
            "required": true,
            "schema": {
              "$ref": "#/definitions/RefreshTokenRequest"
            }
          }
        ],
        "responses": {
          "200": {
            "description": "Tokens refreshed successfully",
            "schema": {
              "$ref": "#/definitions/RefreshResponse"
            }
          },
          "401": {
            "description": "Invalid refresh token"
          }
        }
      }
    },
    "/users/password-reset-request": {
      "post": {
        "tags": [
          "User"
        ],
        "summary": "Request password reset",
        "description": "Sends a password reset link to the user's email.",
        "operationId": "requestPasswordReset",
        "consumes": [
          "application/json"
        ],
        "produces": [
          "application/json"
        ],
        "security": [],
        "parameters": [
          {
            "in": "body",
            "name": "body",
            "description": "User email",
            "required": true,
            "schema": {
              "$ref": "#/definitions/RequestPasswordReset"
            }
          }
        ],
        "responses": {
          "200": {
            "description": "Password reset link sent"
          },
          "404": {
            "description": "User not found"
          }
        }
      }
    },
    "/users/reset-password/{token}": {
      "get": {
        "tags": [
          "User"
        ],
        "summary": "Validate reset token",
        "description": "Validates the password reset token and redirects to the frontend with the token.",
        "operationId": "validateResetToken",
        "produces": [
          "application/json"
        ],
        "security": [],
        "parameters": [
          {
            "in": "path",
            "name": "token",
            "required": true,
            "type": "string",
            "description": "Password reset token"
          }
        ],
        "responses": {
          "302": {
            "description": "Redirection to the frontend with the reset token",
            "headers": {
              "Location": {
                "type": "string",
                "description": "URL to redirect the user to with the reset token",
                "example": "http://your-frontend-url.com/reset-password?token=your-reset-token"
              }
            }
          },
          "400": {
            "description": "Invalid or expired token"
          }
        }
      }
    },
    "/users/reset-password": {
      "post": {
        "tags": [
          "User"
        ],
        "summary": "Reset password",
        "description": "Resets the user's password using the token sent to their email.",
        "operationId": "resetPassword",
        "consumes": [
          "application/json"
        ],
        "produces": [
          "application/json"
        ],
        "security": [],
        "parameters": [
          {
            "in": "body",
            "name": "body",
            "description": "Password reset details",
            "required": true,
            "schema": {
              "$ref": "#/definitions/ResetPassword"
            }
          }
        ],
        "responses": {
          "200": {
            "description": "Password reset successful"
          },
          "400": {
            "description": "Invalid or expired token"
          }
        }
      }
    },
    "/water/": {
      "post": {
        "tags": [
          "Water"
        ],
        "summary": "Create a water record",
        "description": "Adds a new water consumption record for the logged-in user.",
        "operationId": "createWaterRecord",
        "consumes": [
          "application/json"
        ],
        "produces": [
          "application/json"
        ],
        "security": [
          {
            "Bearer": []
          }
        ],
        "parameters": [
          {
            "in": "body",
            "name": "body",
            "description": "Water record to be added",
            "required": true,
            "schema": {
              "$ref": "#/definitions/WaterRecordCreate"
            }
          }
        ],
        "responses": {
          "201": {
            "description": "Water record created successfully",
            "schema": {
              "$ref": "#/definitions/WaterRecord"
            }
          }
        }
      }
    },
    "/water/{id}": {
      "put": {
        "tags": [
          "Water"
        ],
        "summary": "Update a water record",
        "description": "Updates an existing water record for the logged-in user.",
        "operationId": "updateWaterRecord",
        "consumes": [
          "application/json"
        ],
        "produces": [
          "application/json"
        ],
        "security": [
          {
            "Bearer": []
          }
        ],
        "parameters": [
          {
            "in": "path",
            "name": "id",
            "required": true,
            "type": "string",
            "description": "ID of the water record to update"
          },
          {
            "in": "body",
            "name": "body",
            "required": true,
            "schema": {
              "$ref": "#/definitions/WaterRecordUpdate"
            }
          }
        ],
        "responses": {
          "200": {
            "description": "Water record updated successfully",
            "schema": {
              "$ref": "#/definitions/WaterRecord"
            }
          },
          "404": {
            "description": "Water record not found"
          }
        }
      },
      "delete": {
        "tags": [
          "Water"
        ],
        "summary": "Delete a water record",
        "description": "Deletes an existing water record for the logged-in user.",
        "operationId": "deleteWaterRecord",
        "security": [
          {
            "Bearer": []
          }
        ],
        "parameters": [
          {
            "in": "path",
            "name": "id",
            "required": true,
            "type": "string",
            "description": "ID of the water record to delete"
          }
        ],
        "responses": {
          "200": {
            "description": "Water record deleted successfully"
          },
          "404": {
            "description": "Water record not found"
          }
        }
      }
    },
    "/water/daily/{date}": {
      "get": {
        "tags": [
          "Water"
        ],
        "summary": "Get daily water data",
        "description": "Retrieves water consumption data for a specific date for the logged-in user.",
        "operationId": "getDailyWaterData",
        "produces": [
          "application/json"
        ],
        "security": [
          {
            "Bearer": []
          }
        ],
        "parameters": [
          {
            "in": "path",
            "name": "date",
            "required": true,
            "type": "string",
            "description": "The date to retrieve water data for (YYYY-MM-DD)"
          },
          {
            "in": "query",
            "name": "timezone",
            "required": true,
            "type": "string",
            "description": "Timezone for the date parameter"
          }
        ],
        "responses": {
          "200": {
            "description": "Daily water data retrieved successfully",
            "schema": {
              "$ref": "#/definitions/DailyWaterData"
            }
          },
          "404": {
            "description": "No data found for this date"
          }
        }
      }
    },
    "/water/monthly/{year}/{month}": {
      "get": {
        "tags": [
          "Water"
        ],
        "summary": "Get monthly water data",
        "description": "Retrieves water consumption data for a specific month and year for the logged-in user.",
        "operationId": "getMonthlyWaterData",
        "produces": [
          "application/json"
        ],
        "security": [
          {
            "Bearer": []
          }
        ],
        "parameters": [
          {
            "in": "path",
            "name": "year",
            "required": true,
            "type": "integer",
            "description": "The year to retrieve water data for"
          },
          {
            "in": "path",
            "name": "month",
            "required": true,
            "type": "integer",
            "description": "The month to retrieve water data for"
          },
          {
            "in": "query",
            "name": "timezone",
            "required": true,
            "type": "string",
            "description": "Timezone for the year and month parameters"
          }
        ],
        "responses": {
          "200": {
            "description": "Monthly water data retrieved successfully",
            "schema": {
              "$ref": "#/definitions/MonthlyWaterData"
            }
          },
          "404": {
            "description": "No data found for this month and year"
          }
        }
      }
    }
  },
  "definitions": {
    "UserRegister": {
      "type": "object",
      "required": [
        "email",
        "password"
      ],
      "properties": {
        "email": {
          "type": "string",
          "format": "email"
        },
        "password": {
          "type": "string",
          "format": "password"
        },
        "timezone": {
          "type": "string"
        }
      }
    },
    "UserLogin": {
      "type": "object",
      "required": [
        "email",
        "password"
      ],
      "properties": {
        "email": {
          "type": "string",
          "format": "email"
        },
        "password": {
          "type": "string",
          "format": "password"
        }
      }
    },
    "UserResponse": {
      "type": "object",
      "properties": {
        "email": {
          "type": "string",
          "format": "email"
        },
        "nickname": {
          "type": "string"
        },
        "subscription": {
          "type": "string"
        },
        "avatarURL": {
          "type": "string",
          "format": "uri"
        },
        "verify": {
          "type": "boolean"
        },
        "timezone": {
          "type": "string"
        },
        "gender": {
          "type": "string"
        },
        "weight": {
          "type": "number"
        },
        "activeTime": {
          "type": "number"
        },
        "dailyWaterIntake": {
          "type": "number"
        }
      }
    },
    "UpdateUserResponse": {
      "type": "object",
      "properties": {
        "message": {
          "type": "string"
        },
        "user": {
          "type": "object",
          "properties": {
            "nickname": {
              "type": "string"
            },
            "timezone": {
              "type": "string"
            },
            "gender": {
              "type": "string"
            },
            "weight": {
              "type": "number"
            },
            "activeTime": {
              "type": "number"
            },
            "dailyWaterIntake": {
              "type": "number"
            }
          }
        }
      }
    },
    "RefreshResponse": {
      "type": "object",
      "properties": {
        "token": {
          "type": "string"
        },
        "refreshToken": {
          "type": "string"
        }
      }
    },
    "LoginResponse": {
      "type": "object",
      "properties": {
        "token": {
          "type": "string"
        },
        "refreshToken": {
          "type": "string"
        },
        "user": {
          "$ref": "#/definitions/UserResponse"
        }
      }
    },
    "UpdateUser": {
      "type": "object",
      "properties": {
        "nickname": {
          "type": "string"
        },
        "email": {
          "type": "string",
          "format": "email"
        },
        "timezone": {
          "type": "string"
        },
        "gender": {
          "type": "string"
        },
        "weight": {
          "type": "number"
        },
        "activeTime": {
          "type": "number"
        },
        "dailyWaterIntake": {
          "type": "number"
        }
      }
    },
    "UpdateSubscription": {
      "type": "object",
      "properties": {
        "subscription": {
          "type": "string"
        }
      }
    },
    "SubscriptionResponse": {
      "type": "object",
      "properties": {
        "subscription": {
          "type": "string"
        }
      }
    },
    "AvatarResponse": {
      "AvatarResponse": {
        "type": "object",
        "properties": {
          "avatarURL": {
            "type": "string",
            "format": "uri",
            "example": "http://res.cloudinary.com/your_cloud_name/image/upload/v1624460648/avatars/1624460648123-sample.jpg"
          }
        }
      }
    },
    "VerifyResponse": {
      "type": "object",
      "properties": {
        "message": {
          "type": "string"
        }
      }
    },
    "ResendVerification": {
      "type": "object",
      "required": [
        "email"
      ],
      "properties": {
        "email": {
          "type": "string",
          "format": "email"
        }
      }
    },
    "ResendVerificationResponse": {
      "type": "object",
      "properties": {
        "message": {
          "type": "string"
        }
      }
    },
    "RefreshTokenRequest": {
      "type": "object",
      "required": [
        "refreshToken"
      ],
      "properties": {
        "refreshToken": {
          "type": "string"
        }
      }
    },
    "TotalUsersResponse": {
      "type": "object",
      "properties": {
        "totalUsers": {
          "type": "integer",
          "example": 123
        },
        "lastFiveAvatars": {
          "type": "array",
          "items": {
            "type": "string",
            "format": "uri",
            "example": "http://example.com/avatar1.jpg"
          }
        }
      }
    },
    "RequestPasswordReset": {
      "type": "object",
      "properties": {
        "email": {
          "type": "string",
          "format": "email"
        }
      }
    },
    "ResetPassword": {
      "type": "object",
      "properties": {
        "token": {
          "type": "string"
        },
        "newPassword": {
          "type": "string",
          "format": "password"
        }
      }
    },
    "WaterRecordCreate": {
      "type": "object",
      "required": [
        "volume",
        "date",
        "timezone"
      ],
      "properties": {
        "volume": {
          "type": "number"
        },
        "date": {
          "type": "string",
          "format": "date"
        },
        "timezone": {
          "type": "string"
        }
      }
    },
    "WaterRecordUpdate": {
      "type": "object",
      "properties": {
        "volume": {
          "type": "number"
        },
        "date": {
          "type": "string",
          "format": "date"
        },
        "timezone": {
          "type": "string"
        }
      }
    },
    "WaterRecord": {
      "type": "object",
      "properties": {
        "volume": {
          "type": "number"
        },
        "date": {
          "type": "string",
          "format": "date"
        }
      }
    },
    "DailyWaterData": {
      "type": "object",
      "properties": {
        "totalVolume": {
          "type": "number"
        },
        "count": {
          "type": "integer"
        },
        "records": {
          "type": "array",
          "items": {
            "type": "object",
            "properties": {
              "id": {
                "type": "string"
              },
              "volume": {
                "type": "number"
              },
              "date": {
                "type": "string",
                "format": "date-time"
              }
            }
          }
        }
      }
    },
    "MonthlyWaterData": {
      "type": "object",
      "properties": {
        "totalVolume": {
          "type": "number"
        },
        "count": {
          "type": "integer"
        },
        "records": {
          "type": "array",
          "items": {
            "type": "object",
            "properties": {
              "id": {
                "type": "string"
              },
              "volume": {
                "type": "number"
              },
              "date": {
                "type": "string",
                "format": "date-time"
              }
            }
          }
        }
      }
    }
  },
  "securityDefinitions": {
    "Bearer": {
      "type": "apiKey",
      "name": "Authorization",
      "in": "header"
    }
  },
  "security": [
    {
      "Bearer": []
    }
  ]
}